/**
 * This class is generated by jOOQ
 */
package me.lty.data.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import me.lty.data.Keys;
import me.lty.data.Test;
import me.lty.data.tables.records.MainRecord;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Main extends TableImpl<MainRecord> {

	private static final long serialVersionUID = 1736051398;

	/**
	 * The reference instance of <code>test.main</code>
	 */
	public static final Main MAIN = new Main();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MainRecord> getRecordType() {
		return MainRecord.class;
	}

	/**
	 * The column <code>test.main.number</code>.
	 */
	public final TableField<MainRecord, Integer> NUMBER = createField("number", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>test.main.address</code>.
	 */
	public final TableField<MainRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.CHAR.length(10), this, "");

	/**
	 * Create a <code>test.main</code> table reference
	 */
	public Main() {
		this("main", null);
	}

	/**
	 * Create an aliased <code>test.main</code> table reference
	 */
	public Main(String alias) {
		this(alias, MAIN);
	}

	private Main(String alias, Table<MainRecord> aliased) {
		this(alias, aliased, null);
	}

	private Main(String alias, Table<MainRecord> aliased, Field<?>[] parameters) {
		super(alias, Test.TEST, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<MainRecord> getPrimaryKey() {
		return Keys.KEY_MAIN_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<MainRecord>> getKeys() {
		return Arrays.<UniqueKey<MainRecord>>asList(Keys.KEY_MAIN_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Main as(String alias) {
		return new Main(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Main rename(String name) {
		return new Main(name, null);
	}
}
